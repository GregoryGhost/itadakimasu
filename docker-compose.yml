version: '3'

services:
  api_gateway:
    depends_on:
      # api_products:
      db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Itadakimasu.API.Gateway/Dockerfile
    environment:
      MERCHANDISER_ADDRESS: "http://api_products:80"
    ports:
      - "5243:80"
    networks:
      - api-network

  rabbitmq:
    image: masstransit/rabbitmq:latest
    ports:
     - "5672:5672"
     - "15672:15672"
     - "15692:15692"

  api_products_synchronizer_saga:
    depends_on:
    db:
      condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsSynchronizationSaga/Dockerfile
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: "ASbL5k!^k^Fsv]e@"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_ENVIRONMENT: "Development"
      RABBITMQ_ADDRESS: "5672"
      RABBITMQ_LOGIN: "guest"
      RABBITMQ_PASSWORD: "guest"
      API_PRODUCTS_AGGREGATOR_ADDRESS: "http://api_products_synchronizer:80/"
      API_PRODUCTS_SYNCHRONIZER_ADDRESS: "http://api_products_synchronizer:80/"
    ports:
      - "5224:80"
      - "5225:443"
    networks:
      - api-network
    volumes:

  api_products_synchronizer:
    depends_on:
    db:
      condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsSynchronizer/Dockerfile
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: "ASbL5k!^k^Fsv]e@"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_ENVIRONMENT: "Development"
      API_PRODUCTS: "http://api_products:80/"
    ports:
      - "5222:80"
      - "5223:443"
    networks:
      - api-network
    volumes:
      - ./dev-certs/:/https:ro

  api_products_aggregator:
    depends_on:
    db:
      condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsAggregator/Dockerfile
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: "ASbL5k!^k^Fsv]e@"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_ENVIRONMENT: "Development"
    ports:
      - "5220:80"
      - "5221:443"
    networks:
      - api-network
    volumes:
      - ./dev-certs/:/https:ro


  api_products:
    depends_on:
      db:
        condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.Products/Dockerfile
    environment:
      DB_CONNECTION_STRING: "Username=postgres;Password=mysecretpassword;host=db;Port=5432;Database=products;Integrated Security=true;Pooling=true;"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "ASbL5k!^k^Fsv]e@"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_ENVIRONMENT: "Development"
    ports:
      - "5218:80"
      - "5219:443"
    networks:
      - api-network
    volumes:
      - ./dev-certs/:/https:ro

  db:
    image: postgres:latest
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=postgres
    user: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - "postgresql-data:/var/lib/postgresql/data"
    networks:
      - api-network

volumes:
  postgresql-data:

networks:
  api-network:
    driver: bridge
version: '3.9'

volumes:
  postgresql-data:

networks:
  api-network:
    driver: bridge

services:
  api_gateway:
    depends_on:
      api_products:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Itadakimasu.API.Gateway/Dockerfile
    environment:
      API_PRODUCTS_ADDRESS: ${API_PRODUCTS_ADDRESS}
    ports:
      - "5243:80"
      - "5244:443"
    networks:
      - api-network

  rabbitmq:
    image: "masstransit/rabbitmq:${RABBITMQ_TAG}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s
    ports:
     - "5672:5672"
     - "15672:15672"
     - "15692:15692"
    networks:
      - api-network

  db:
    image: postgres:${POSTGRES_TAG}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    user: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./Configs/Database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - "postgresql-data:/var/lib/postgresql/data"
    networks:
      - api-network

  api_products_synchronizer_saga:
    depends_on:
      api_products_aggregator:
        condition: service_started
      api_products_synchronizer:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsSynchronizationSaga/Dockerfile
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: ${ASPNETCORE_Kestrel__Certificates__Default__Password}
      ASPNETCORE_Kestrel__Certificates__Default__Path: ${ASPNETCORE_Kestrel__Certificates__Default__Path}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      RABBITMQ_ADDRESS: ${RABBITMQ_ADDRESS}
      RABBITMQ_LOGIN: ${RABBITMQ_LOGIN}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      API_PRODUCTS_AGGREGATOR_ADDRESS: ${API_PRODUCTS_AGGREGATOR_ADDRESS}
      API_PRODUCTS_SYNCHRONIZER_ADDRESS: ${API_PRODUCTS_SYNCHRONIZER_ADDRESS}
    ports:
      - "5224:80"
      - "5225:443"
    networks:
      - api-network
    volumes:
      - ./Configs/DevCerts/:/https:ro

  api_products_synchronizer:
    depends_on:
      api_products:
        condition: service_started
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsSynchronizer/Dockerfile
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: ${ASPNETCORE_Kestrel__Certificates__Default__Password}
      ASPNETCORE_Kestrel__Certificates__Default__Path: ${ASPNETCORE_Kestrel__Certificates__Default__Path}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      API_PRODUCTS_ADDRESS: ${API_PRODUCTS_ADDRESS}
    ports:
      - "5222:80"
      - "5223:443"
    networks:
      - api-network
    volumes:
      - ./Configs/DevCerts/:/https:ro

  api_products_aggregator:
    depends_on:
      db:
        condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.ProductsAggregator/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      ASPNETCORE_Kestrel__Certificates__Default__Password: ${ASPNETCORE_Kestrel__Certificates__Default__Password}
      ASPNETCORE_Kestrel__Certificates__Default__Path: ${ASPNETCORE_Kestrel__Certificates__Default__Path}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "5220:80"
      - "5221:443"
    networks:
      - api-network
    volumes:
      - ./Configs/DevCerts/:/https:ro

  api_products:
    depends_on:
      db:
        condition: service_healthy
    # TODO: replace curl on dotnet tools for health checking
    # healthcheck:
    #   test: curl --silent --fail http://api_products:80/health || exit 1
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    build:
      context: .
      dockerfile: ./Itadakimasu.API.Products/Dockerfile
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      ASPNETCORE_Kestrel__Certificates__Default__Password: ${ASPNETCORE_Kestrel__Certificates__Default__Password}
      ASPNETCORE_Kestrel__Certificates__Default__Path: ${ASPNETCORE_Kestrel__Certificates__Default__Path}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    ports:
      - "5218:80"
      - "5219:443"
    networks:
      - api-network
    volumes:
      - ./Configs/DevCerts/:/https:ro